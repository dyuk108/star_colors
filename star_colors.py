# -*- coding: utf-8 -*-
#
# Функции по преобразованию значений эффективной температуры звезды или её спектрального класса,
# а также показателя B-V в цвет RGB.
# Функция t2rgb() превращает Teff в RGB,
# функция sptype2t() выдаёт для данного спектрального класса/подкласса типичную Teff,
# функция bv2rgb() превращает показатель цвета B-V в RGB.
# Клыков Д.Ю., 2025.

# Исходный код для функции bv2rgb() взят отюда отсюда: https://stackoverflow.com/questions/21977786/star-b-v-color-index-to-apparent-rgb-color
# Спасибо AymericG.

import numpy as np

# Функция преобразования цветовой температуры в цвет RGB (#RRGGBB).
# Теория взята отсюда https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html ,
# но подправлено мною для более яркого отображения цвета. В оригинале почти не отображается жёлтый.
def t2rgb(t):
    # Red.
    if t <= 6000:
        red = 0.0026*t+239
    elif t <= 7000:
        red = -5937/500000*t+81461/250
    else:
        red = 329.698*(t/100-60)**-0.133

    # Green.
    if t < 4500:
        green = 99.47*np.log(t/100)-161.12
    elif t < 7500:
        green = -(((t-6500)*0.003)**2)+251
    else:
        green = 288.122*((t/100-60)**-0.0755) + 5

    # Blue.
    if t < 2500:
        blue = (7/250)*t
    elif t <= 6650:
        blue = 138.5177*np.log(t/100-10)-305.0448
    else:
        blue = 254

    rgb = (int(red), int(green), int(blue))
    for i in range(3):
        if rgb[i] < 0:
            rgb[i] = 0
        elif rgb[i] > 255:
            rgb[i] = 255
    return '#%02x%02x%02x' % rgb

# Функция преобразования сп. класса (в виде цифры) в эффективную темперктуру Teff.
# В сп. классе буквы O, B... заменяются на цифры 0, 1. К ней дописывается цифра подкласса.
def sptype2t(sp):
    if sp == '':
        return None # нет указания сп. класса
    
    # список типичных температур звёзд спектральных классов от O0 до M9. Информация взята из Википедии.
    t_arr = (50000, 47000, 45000, 43500, 42000, 40600, 38870, 36870, 34880, 32800, # класс O
            29000, 24500, 19500, 17000, 15400, 14400, 13400, 12500, 11500, 10700, # класс B
            9900, 9400, 8900, 8520, 8300, 8150, 7950, 7830, 7600, 7380, # класс A
            7250, 7120, 7000, 6750, 6600, 6550, 6400, 6250, 6170, 6010, # класс F
            5900, 5800, 5750, 5680, 5600, 5580, 5500, 5470, 5430, 5350, # класс G
            5280, 5110, 4940, 4700, 4500, 4400, 4300, 4130, 4000, 3850, # класс K
            3759, 3624, 3489, 3354, 3219, 3084, 2949, 2814, 2679, 2544) # класс M

    # Для индексирования массива t_arr превращаем букву класса в второй разряд десятичного числа.
    types = {'O': 0, 'B': 10, 'A': 20, 'F': 30, 'G': 40, 'K': 50, 'M': 60}

    # Буква класса.
    letter = sp[0].upper() # к верхнему регистру
    if letter in types: # если есть сп. класс в списке
        sp_dig = types[sp[0]] # заменяем на цифру (для второго разряда числа)
    else:
        return None # тип нестандартный или не указан
    
    # Подкласс.
    if sp[1].isdigit(): # если второй символ - цифра
        sp_dig += int(sp[1])
    else:
        sp_dig += 5 # возьмём середину сп. класса
    
    # Функция преобразования
    # if sp_dig <= 9: # класс O
    #     t = -1775*sp_dig+48775
    # elif sp_dig <= 12: # часть класса B
    #     t = -13300/3*t+72700
    # else:
    #     t = 1.05/sp_dig*200000+300
    # В результате проще оказалось использовать таблицу t_arr.
    
    return t_arr[sp_dig]

# Функция преобразования показателя B-V в цвет RGB (#RRGGBB).
# Взято отсюда: https://stackoverflow.com/questions/21977786/star-b-v-color-index-to-apparent-rgb-color
# Спасибо AymericG.
def bv2rgb(bv):
    if bv < -0.40: bv = -0.40
    if bv > 2.00: bv = 2.00

    r = 0.0
    g = 0.0
    b = 0.0

    if  -0.40 <= bv<0.00:
        t=(bv+0.40)/(0.00+0.40)
        r=0.61+(0.11*t)+(0.1*t*t)
    elif 0.00 <= bv<0.40:
        t=(bv-0.00)/(0.40-0.00)
        r=0.83+(0.17*t)
    elif 0.40 <= bv<2.10:
        t=(bv-0.40)/(2.10-0.40)
        r=1.00
    if  -0.40 <= bv<0.00:
        t=(bv+0.40)/(0.00+0.40)
        g=0.70+(0.07*t)+(0.1*t*t)
    elif 0.00 <= bv<0.40:
        t=(bv-0.00)/(0.40-0.00)
        g=0.87+(0.11*t)
    elif 0.40 <= bv<1.60:
        t=(bv-0.40)/(1.60-0.40)
        g=0.98-(0.16*t)
    elif 1.60 <= bv<2.00:
        t=(bv-1.60)/(2.00-1.60)
        g=0.82-(0.5*t*t)
    if  -0.40 <= bv<0.40:
        t=(bv+0.40)/(0.40+0.40)
        b=1.00
    elif 0.40 <= bv<1.50:
        t=(bv-0.40)/(1.50-0.40)
        b=1.00-(0.47*t)+(0.1*t*t)
    elif 1.50 <= bv<1.94:
        t=(bv-1.50)/(1.94-1.50)
        b=0.63-(0.6*t*t)

    rgb = (int(r*255), int(g*255), int(b*255))
    for i in range(3):
        if rgb[i] < 0:
            rgb[i] = 0
        elif rgb[i] > 255:
            rgb[i] = 255
    return '#%02x%02x%02x' % rgb

